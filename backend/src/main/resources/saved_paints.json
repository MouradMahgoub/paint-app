package com.youssif.mourad.paint.app.paint.fileHandler;

import com.youssif.mourad.paint.app.paint.Shape;

import java.io.File;
import java.io.IOException;
import java.util.List;

import org.simpleframework.xml.Serializer;
import org.simpleframework.xml.core.Persister;

public class XmlFileHandler {
    public static List<Shape> save(List<Shape> currentPaint, String path) throws Exception {
        Serializer serializer = new Persister();
        serializer.write(currentPaint, new File(path));
        return currentPaint;
    }

    public static List<Shape> load(String path) throws Exception {
        Serializer serializer = new Persister();
        return serializer.read(ArrayList.class, new File(path));
    }
}


@Scope("save")
    List<Shape> save(RequestObject requestObject) throws IOException, JAXBException {
                String type = requestObject.getProperties().get("type").toString();
        String path = requestObject.getProperties().get("path").toString();
        if(type.toLowerCase().equals("json")){
            // JsonFileHandler jsonFileHandler = new JsonFileHandler();
            return JsonFileHandler.save(currentPaint, path);
        }else{
            // XmlFileHandler xmlFileHandler = new XmlFileHandler();
            return XmlFileHandler.save(currentPaint, path);
        }
        // return this.currentPaint.getShapes();
    }
    List<Shape> load(String path) throws IOException {
        JsonFileHandler jsonFileHandler = new JsonFileHandler();
        currentPaint.setShapes(jsonFileHandler.load(path));
        return this.currentPaint.getShapes();
    }

package com.youssif.mourad.paint.app.paint;

import javax.xml.bind.annotation.XmlRootElement;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

@XmlRootElement
public class Paint {
    private String name;
    private String path;
    private List<Shape> Shapes = new    ArrayList<Shape>();

    public Paint() {
    }

    public Paint(String name, String path, List<Shape> Shapes) {
        this.name = name;
        this.path = path;
        this.Shapes = Shapes;
    }

    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getPath() {
        return this.path;
    }

    public void setPath(String path) {
        this.path = path;
    }

    public List<Shape> getShapes() {
        return this.Shapes;
    }

    public void setShapes(List<Shape> Shapes) {
        this.Shapes = Shapes;
    }

    public Paint name(String name) {
        setName(name);
        return this;
    }

    public Paint path(String path) {
        setPath(path);
        return this;
    }

    public Paint Shapes(List<Shape> Shapes) {
        setShapes(Shapes);
        return this;
    }

    @Override
    public boolean equals(Object o) {
        if (o == this)
            return true;
        if (!(o instanceof Paint)) {
            return false;
        }
        Paint paint = (Paint) o;
        return Objects.equals(name, paint.name) && Objects.equals(path, paint.path) && Objects.equals(Shapes, paint.Shapes);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, path, Shapes);
    }

    @Override
    public String toString() {
        return "{" +
            " name='" + getName() + "'" +
            ", path='" + getPath() + "'" +
            ", Shapes='" + getShapes() + "'" +
            "}";
    }

    
}
package com.youssif.mourad.paint.app.paint.fileHandler;

import com.youssif.mourad.paint.app.paint.Paint;
import com.youssif.mourad.paint.app.paint.Shape;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;

public class XmlFileHandler {
    public static List<Shape> save (Paint currentPaint, String path) throws JAXBException {
        JAXBContext jaxbContext = JAXBContext.newInstance(Paint.class);
        Marshaller marshaller = jaxbContext.createMarshaller();
        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
        marshaller.setProperty(Marshaller.JAXB_ENCODING, "ISO-8859-1");
        marshaller.marshal(currentPaint, new File(path));
        return currentPaint.getShapes();
    }
    public static Paint load(String path) throws JAXBException {
        JAXBContext context = JAXBContext.newInstance(Paint.class);
        Unmarshaller unmarshaller = context.createUnmarshaller();
        Paint paint = (Paint) unmarshaller.unmarshal(new File(path));
        return paint;
    }
}
package com.youssif.mourad.paint.app.paint.fileHandler;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.youssif.mourad.paint.app.paint.Paint;
import com.youssif.mourad.paint.app.paint.Shape;
import com.youssif.mourad.paint.app.paint.factory.ShapeFactory;

public class JsonFileHandler {
<<<<<<< Updated upstream
    public void saveAsJsonFile(Paint paint, String path) throws IOException{
        ObjectMapper mapper = new ObjectMapper();
        mapper.writeValue(new File(path), paint);
=======
    public static List<Shape> save(Paint currentPaint, String path) throws IOException{
        ObjectMapper objectMapper = new ObjectMapper();
        objectMapper.writeValue(new File(path), currentPaint);
        return currentPaint.getShapes();
>>>>>>> Stashed changes
    }

    public static List<Shape> load(String path) throws IOException{
        ObjectMapper objectMapper = new ObjectMapper();
        List<Map<String, Object>> shapes = objectMapper.readValue(new File(path), new TypeReference<List<Map<String, Object>>>() {});
        ShapeFactory shapeFactory = new ShapeFactory();
        List<Shape> paint = new ArrayList<Shape>();
        for(Map<String, Object> properties : shapes)
            paint.add(shapeFactory.create(properties));
        return paint; 
    }
}
